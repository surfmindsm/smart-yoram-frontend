=====================================================
🚨 백엔드 API 422 에러 해결 가이드 (긴급)
=====================================================
작성일: 2025-01-11
대상: 백엔드 개발자
문제: 모든 채팅 API에서 422 Unprocessable Entity 에러 발생

=====================================================
📋 현재 상황 요약
=====================================================

✅ 백엔드 API 엔드포인트는 존재함 (구현 완료 상태)
✅ 프론트엔드에서 API 호출 시도 중
❌ 모든 요청에서 422 Unprocessable Entity 에러 발생
❌ JWT 인증 문제로 추정됨

발생하는 API 엔드포인트:
- GET  /api/v1/chat/histories
- POST /api/v1/chat/histories  
- GET  /api/v1/chat/histories/{id}/messages
- POST /api/v1/chat/messages
- GET  /api/v1/agents

=====================================================
🔧 수정해야 할 사항
=====================================================

1. JWT 토큰 검증 로직 수정
----------------------------
현재 프론트엔드에서 보내는 Authorization 헤더:
Authorization: Bearer {localStorage의 token 값}

문제점:
- JWT 토큰 파싱 실패
- 토큰 검증 실패
- 사용자 권한 확인 실패

해결 방법:
- JWT 토큰 디코딩 로직 확인
- 토큰 서명 검증 확인  
- 토큰 만료 시간 검증 확인

2. 요청 바디 검증 로직 수정
----------------------------
프론트엔드에서 보내는 요청 형식:

POST /api/v1/chat/messages:
{
  "chat_history_id": "string",
  "agent_id": "string", 
  "content": "string"
}

POST /api/v1/chat/histories:
{
  "agent_id": "string",
  "title": "string"
}

문제점:
- 필수 필드 검증 실패
- 데이터 타입 검증 실패
- 요청 스키마 불일치

해결 방법:
- Pydantic 모델 검증 로직 확인
- 필수 필드 설정 확인
- 데이터 타입 매핑 확인

3. CORS 설정 확인
----------------------------
프론트엔드 도메인: http://localhost:3000

필요한 CORS 헤더:
- Access-Control-Allow-Origin: http://localhost:3000
- Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS
- Access-Control-Allow-Headers: Content-Type, Authorization

4. 데이터베이스 연결 확인
----------------------------
테이블 존재 여부 확인:
- chat_histories 테이블
- chat_messages 테이블
- agents 테이블

=====================================================
🔑 GPT API 키 설정 (중요!)
=====================================================

OpenAI API 키:
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

설정 방법:
1. 환경변수로 설정: OPENAI_API_KEY
2. 또는 데이터베이스 church_settings 테이블에 암호화하여 저장
3. chat-gpt 기능 구현 시 이 키 사용

GPT 설정:
- 모델: gpt-3.5-turbo
- 최대 토큰: 500
- Temperature: 0.7
- System Message: "당신은 교회 사역을 돕는 AI 교역자입니다. 한국어로 친근하고 도움이 되는 답변을 제공해주세요."

=====================================================
🧪 디버깅 방법
=====================================================

1. 로그 확인
----------------------------
다음 내용을 로그에 출력해주세요:

- 받은 JWT 토큰 (앞 10자리만)
- 파싱된 사용자 ID
- 요청 바디 내용
- 검증 실패 사유
- DB 쿼리 결과

예시 로그:
```
[DEBUG] JWT Token: Bearer eyJhb...
[DEBUG] User ID: 123
[DEBUG] Request Body: {"chat_history_id": "chat-123", "content": "안녕하세요"}
[DEBUG] Validation Error: Missing required field 'agent_id'
[DEBUG] DB Query: SELECT * FROM chat_histories WHERE user_id = 123
```

2. 테스트 방법
----------------------------
다음 curl 명령으로 테스트:

# 1. 인증 테스트
curl -X GET "https://api.surfmind-team.com/api/v1/chat/histories" \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -H "Content-Type: application/json"

# 2. 메시지 전송 테스트  
curl -X POST "https://api.surfmind-team.com/api/v1/chat/messages" \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{"chat_history_id": "1", "agent_id": "1", "content": "테스트 메시지"}'

기대 결과: 200 OK 응답

=====================================================
📝 POST /api/v1/chat/messages 구현 예시
=====================================================

FastAPI 구현 예시:

```python
from openai import OpenAI

# OpenAI 클라이언트 초기화
client = OpenAI(api_key=OPENAI_API_KEY)

@app.post("/api/v1/chat/messages")
async def send_message(
    message: ChatMessageRequest,
    current_user = Depends(get_current_user)
):
    try:
        # 1. 사용자 메시지 저장
        user_msg = await save_user_message(
            chat_history_id=message.chat_history_id,
            content=message.content,
            user_id=current_user.id
        )
        
        # 2. GPT API 호출
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system", 
                    "content": "당신은 교회 사역을 돕는 AI 교역자입니다. 한국어로 친근하고 도움이 되는 답변을 제공해주세요."
                },
                {"role": "user", "content": message.content}
            ],
            max_tokens=500,
            temperature=0.7
        )
        
        ai_content = response.choices[0].message.content
        tokens_used = response.usage.total_tokens
        cost = tokens_used * 0.0015 / 1000
        
        # 3. AI 응답 저장
        ai_msg = await save_ai_message(
            chat_history_id=message.chat_history_id,
            content=ai_content,
            tokens_used=tokens_used,
            cost=cost
        )
        
        # 4. 응답 반환
        return {
            "success": True,
            "data": {
                "user_message": {
                    "id": user_msg.id,
                    "content": user_msg.content,
                    "role": "user",
                    "timestamp": user_msg.created_at
                },
                "ai_response": {
                    "id": ai_msg.id,
                    "content": ai_msg.content,
                    "role": "assistant", 
                    "timestamp": ai_msg.created_at,
                    "tokensUsed": tokens_used,
                    "cost": cost
                }
            }
        }
        
    except Exception as e:
        logger.error(f"Chat message error: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))
```

=====================================================
🎯 우선순위 작업
=====================================================

1. ⭐ 최우선: JWT 토큰 검증 로직 수정
   - 422 에러의 주요 원인으로 추정됨
   - 토큰 파싱 및 사용자 인증 확인

2. ⭐ 높음: OpenAI API 키 설정
   - 환경변수 OPENAI_API_KEY 설정
   - GPT 연동 로직 구현

3. ⭐ 중간: 요청 검증 로직 점검
   - Pydantic 모델 확인
   - 필수 필드 검증

4. ⭐ 낮음: CORS 설정 점검
   - localhost:3000 허용 확인

=====================================================
📞 연락처
=====================================================

문제 해결 후 다음 사항 확인:
1. 브라우저에서 새 대화 시작 가능
2. 메시지 전송 시 실제 GPT 응답 수신
3. 콘솔에서 200 OK 응답 확인
4. 더 이상 422 에러 없음

추가 질문이나 도움이 필요하면 연락 주세요.

=====================================================
