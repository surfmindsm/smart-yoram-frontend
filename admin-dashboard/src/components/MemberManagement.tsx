import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { api } from '../services/api';
import { 
  Search, 
  Plus, 
  RefreshCw, 
  Camera,
  QrCode,
  ChevronUp,
  ChevronDown,
  ChevronLeft,
  ChevronRight,
  User,
  Trash2,
  Key,
  Eye,
  EyeOff,
  Edit3,
  Save,
  X,
  MapPin,
  UserCheck,
  Briefcase,
  Heart,
  Upload,
  Download,
  Settings
} from 'lucide-react';
import { cn } from '../lib/utils';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { Card, CardContent } from './ui/card';
import { Badge } from './ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogClose } from './ui/dialog';
import { Textarea } from './ui/textarea';
import AddMemberModal from './AddMemberModal';

interface Member {
  id: number;
  name: string;
  name_eng?: string;
  email: string;
  gender: string;
  birthdate: string | null;
  phone: string;
  address: string | null;
  position: string | null;
  district: string | null;
  church_id: number;
  profile_photo_url: string | null;
  member_status: string;
  registration_date: string | null;
  
  // ÏÇ¨Ïó≠ Ï†ïÎ≥¥
  department_code?: string;
  position_code?: string;
  appointed_on?: string;
  ordination_church?: string;
  job_title?: string;
  workplace?: string;
  workplace_phone?: string;
  
  // Í∞úÏù∏ Ï†ïÎ≥¥
  marital_status?: string;
  spouse_name?: string;
  married_on?: string;
  
  // Ïó∞ÎùΩÏ≤ò Ï†ïÎ≥¥
  contacts?: Array<{ type: string; value: string; }>;
  
  // ÏÑ±Î°Ä Í∏∞Î°ù
  sacraments?: Array<{ type: string; date: string; church_name: string; }>;
  
  // Ïù¥Î™Ö Í∏∞Î°ù
  transfers?: Array<{ type: string; church_name: string; date: string; }>;
  
  // Ï∞®Îüâ Ï†ïÎ≥¥
  vehicles?: Array<{ car_type: string; plate_no: string; }>;
}

const MemberManagement: React.FC = () => {
  const navigate = useNavigate();
  const [members, setMembers] = useState<Member[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [appliedSearchTerm, setAppliedSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [showAddModal, setShowAddModal] = useState(false);
  const [showPhotoModal, setShowPhotoModal] = useState(false);
  const [showDetailModal, setShowDetailModal] = useState(false);
  const [selectedMember, setSelectedMember] = useState<Member | null>(null);
  const [isEditMode, setIsEditMode] = useState(false);
  const [editedMember, setEditedMember] = useState<Partial<Member>>({});
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [showAddMemberModal, setShowAddMemberModal] = useState(false);
  const [showExcelImportModal, setShowExcelImportModal] = useState(false);
  const [excelFile, setExcelFile] = useState<File | null>(null);
  const [isImporting, setIsImporting] = useState(false);
  
  // View and pagination states
  const [viewType, setViewType] = useState<'grid'>('grid');
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(20);
  const [totalCount, setTotalCount] = useState(0);
  const [sortField, setSortField] = useState<keyof Member | null>(null);
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');
  const [showPasswordModal, setShowPasswordModal] = useState(false);
  const [passwordInfo, setPasswordInfo] = useState<{member_id: number, member_name: string, email: string, password: string} | null>(null);
  const [showPassword, setShowPassword] = useState(false);
  
  // Advanced search states
  const [showAdvancedSearch, setShowAdvancedSearch] = useState(false);
  const [advancedSearchData, setAdvancedSearchData] = useState({
    name: '',
    email: '',
    phone: '',
    gender: 'all',
    position: '',
    district: '',
    ageFrom: '',
    ageTo: '',
    member_type: 'all',
    spiritual_grade: 'all'
  });

  const [newMember, setNewMember] = useState({
    name: '',
    email: '',
    gender: 'ÎÇ®',
    birthdate: '',
    phone: '',
    address: '',
    position: '',
    district: ''
  });

  useEffect(() => {
    fetchMembers();
  }, [appliedSearchTerm, statusFilter, currentPage, pageSize, sortField, sortOrder]);

  const fetchMembers = async () => {
    try {
      setLoading(true);
      
      // 1. Ï†ÑÏ≤¥ Í∞úÏàòÎ•º Î®ºÏ†Ä Ï°∞Ìöå (pagination ÏóÜÏù¥)
      console.log('üî¢ Ïã§Ï†ú Ï†ÑÏ≤¥ ÍµêÏù∏ Ïàò Ï°∞Ìöå Ï§ë...');
      const countParams = new URLSearchParams();
      if (appliedSearchTerm) countParams.append('search', appliedSearchTerm);
      if (statusFilter !== 'all') countParams.append('member_status', statusFilter);
      
      const countResponse = await api.get(`/members/?${countParams.toString()}`);
      const actualTotalCount = countResponse.data.length;
      console.log('‚úÖ Ïã§Ï†ú Ï†ÑÏ≤¥ ÍµêÏù∏ Ïàò:', actualTotalCount);
      
      // 2. ÌòÑÏû¨ ÌéòÏù¥ÏßÄ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
      console.log('üìÑ ÌòÑÏû¨ ÌéòÏù¥ÏßÄ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ï§ë...');
      const params = new URLSearchParams();
      if (appliedSearchTerm) params.append('search', appliedSearchTerm);
      if (statusFilter !== 'all') params.append('member_status', statusFilter);
      params.append('skip', ((currentPage - 1) * pageSize).toString());
      params.append('limit', pageSize.toString());
      
      const response = await api.get(`/members/?${params.toString()}`);
      
      // Sort data on client side for now
      let sortedData = [...response.data];
      if (sortField) {
        sortedData.sort((a, b) => {
          const aVal = a[sortField] || '';
          const bVal = b[sortField] || '';
          if (sortOrder === 'asc') {
            return aVal > bVal ? 1 : -1;
          } else {
            return aVal < bVal ? 1 : -1;
          }
        });
      }
      
      console.log('üìä ÏµúÏ¢Ö Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï:');
      console.log('- ÌòÑÏû¨ ÌéòÏù¥ÏßÄ Îç∞Ïù¥ÌÑ∞ Ïàò:', sortedData.length);
      console.log('- Ïã§Ï†ú Ï†ÑÏ≤¥ ÍµêÏù∏ Ïàò:', actualTotalCount);
      console.log('- ÌëúÏãúÎê† Î≤îÏúÑ:', `${Math.min((currentPage - 1) * pageSize + 1, actualTotalCount)}-${Math.min(currentPage * pageSize, actualTotalCount)}`);
      
      setMembers(sortedData);
      setTotalCount(actualTotalCount);
    } catch (error) {
      console.error('ÍµêÏù∏ Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = () => {
    setCurrentPage(1); // Reset to first page on new search
    setAppliedSearchTerm(searchTerm);
  };

  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  const handleSort = (field: keyof Member) => {
    if (sortField === field) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortOrder('asc');
    }
  };

  const totalPages = Math.ceil(totalCount / pageSize);

  const handleAddMember = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      // Don't send church_id - backend will use current user's church_id
      const response = await api.post('/members/', newMember);
      setMembers([...members, response.data]);
      setShowAddModal(false);
      setNewMember({
        name: '',
        email: '',
        gender: 'ÎÇ®',
        birthdate: '',
        phone: '',
        address: '',
        position: '',
        district: ''
      });
    } catch (error) {
      console.error('ÍµêÏù∏ Ï∂îÍ∞Ä Ïã§Ìå®:', error);
      alert('ÍµêÏù∏ Ï∂îÍ∞ÄÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };

  const handlePhotoUpload = async (file: File) => {
    if (!selectedMember) return;

    try {
      const formData = new FormData();
      formData.append('file', file);

      const response = await api.post(`/members/${selectedMember.id}/upload-photo`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      // Update member in list
      setMembers(members.map(m => 
        m.id === selectedMember.id 
          ? { ...m, profile_photo_url: response.data.profile_photo_url }
          : m
      ));
      
      setShowPhotoModal(false);
      alert('ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑÏù¥ ÏóÖÎ°úÎìúÎêòÏóàÏäµÎãàÎã§.');
    } catch (error: any) {
      console.error('ÏÇ¨ÏßÑ ÏóÖÎ°úÎìú Ïã§Ìå®:', error);
      const errorMessage = error.response?.data?.detail || 'ÏÇ¨ÏßÑ ÏóÖÎ°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.';
      alert(`ÏÇ¨ÏßÑ ÏóÖÎ°úÎìú Ïã§Ìå®: ${errorMessage}`);
    }
  };

  const handleDeletePhoto = async (memberId: number) => {
    try {
      await api.delete(`/members/${memberId}/delete-photo`);
      setMembers(members.map(m => 
        m.id === memberId 
          ? { ...m, profile_photo_url: null }
          : m
      ));
      alert('ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
    } catch (error) {
      console.error('ÏÇ¨ÏßÑ ÏÇ≠Ï†ú Ïã§Ìå®:', error);
      alert('ÏÇ¨ÏßÑ ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };

  const getStatusBadgeVariant = (status: string) => {
    switch (status) {
      case 'active': return 'success' as const;
      case 'inactive': return 'warning' as const;
      case 'transferred': return 'destructive' as const;
      default: return 'secondary' as const;
    }
  };

  const getGenderText = (gender: string) => {
    if (gender === 'M' || gender === 'MALE' || gender === 'male') return 'ÎÇ®';
    if (gender === 'F' || gender === 'FEMALE' || gender === 'female') return 'Ïó¨';
    return gender; // Ïù¥ÎØ∏ 'ÎÇ®', 'Ïó¨'Î°ú ÎêòÏñ¥ÏûàÍ±∞ÎÇò Îã§Î•∏ Í∞íÏù∏ Í≤ΩÏö∞ Í∑∏ÎåÄÎ°ú ÌëúÏãú
  };

  const handleGetPassword = async (memberId: number) => {
    try {
      const response = await api.get(`/members/${memberId}/password`);
      setPasswordInfo(response.data);
      setShowPasswordModal(true);
      setShowPassword(false); // Reset to hidden state
    } catch (error: any) {
      console.error('ÎπÑÎ∞ÄÎ≤àÌò∏ Ï°∞Ìöå Ïã§Ìå®:', error);
      if (error.response?.status === 404) {
        alert('Ïù¥ ÍµêÏù∏ÏùÄ ÏïÑÏßÅ Í≥ÑÏ†ïÏù¥ ÏÉùÏÑ±ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
      } else {
        alert('ÎπÑÎ∞ÄÎ≤àÌò∏ Ï°∞ÌöåÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    }
  };

  const handleMemberClick = (member: Member) => {
    setSelectedMember(member);
    setEditedMember(member);
    setIsEditMode(false);
    setShowDetailModal(true);
  };

  const handleEditMember = () => {
    setIsEditMode(true);
  };

  const handleCancelEdit = () => {
    if (selectedMember) {
      setEditedMember(selectedMember);
    }
    setIsEditMode(false);
  };

  const handleSaveMember = async () => {
    if (!selectedMember) return;
    
    try {
      const response = await api.put(`/members/${selectedMember.id}`, editedMember);
      
      // Update member in list
      setMembers(members.map(m => 
        m.id === selectedMember.id 
          ? { ...m, ...response.data }
          : m
      ));
      
      setSelectedMember({ ...selectedMember, ...response.data });
      setIsEditMode(false);
      alert('ÍµêÏù∏ Ï†ïÎ≥¥Í∞Ä ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.');
    } catch (error: any) {
      console.error('ÍµêÏù∏ Ï†ïÎ≥¥ ÏàòÏ†ï Ïã§Ìå®:', error);
      const errorMessage = error.response?.data?.detail || 'ÍµêÏù∏ Ï†ïÎ≥¥ ÏàòÏ†ïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.';
      alert(`ÏàòÏ†ï Ïã§Ìå®: ${errorMessage}`);
    }
  };

  const handleDeleteMember = async () => {
    if (!selectedMember) return;

    try {
      await api.delete(`/members/${selectedMember.id}`);
      
      // Remove member from list
      setMembers(members.filter(m => m.id !== selectedMember.id));
      setShowDetailModal(false);
      setShowDeleteConfirm(false);
      setSelectedMember(null);
      alert('ÍµêÏù∏ Ï†ïÎ≥¥Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
    } catch (error: any) {
      console.error('ÍµêÏù∏ ÏÇ≠Ï†ú Ïã§Ìå®:', error);
      const errorMessage = error.response?.data?.detail || 'ÍµêÏù∏ ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.';
      alert(`ÏÇ≠Ï†ú Ïã§Ìå®: ${errorMessage}`);
    }
  };

  const handleDeleteClick = () => {
    setShowDeleteConfirm(true);
  };

  const downloadExcelTemplate = () => {
    const headers = [
      'Ïù¥Î¶Ñ',
      'ÏòÅÎ¨∏Î™Ö',
      'Ïù¥Î©îÏùº',
      'ÏÑ±Î≥Ñ',
      'ÏÉùÎÖÑÏõîÏùº',
      'Ï†ÑÌôîÎ≤àÌò∏',
      'Ï£ºÏÜå',
      'ÏßÅÎ∂Ñ',
      'Íµ¨Ïó≠',
      'Î∂ÄÏÑúÏΩîÎìú',
      'ÏßÅÎ∂ÑÏΩîÎìú',
      'ÏûÑÎ™ÖÏùº',
      'ÏïàÏàòÍµêÌöå',
      'ÏßÅÏóÖ',
      'ÏßÅÏû•Î™Ö',
      'ÏßÅÏû•Ï†ÑÌôîÎ≤àÌò∏',
      'Í≤∞ÌòºÏÉÅÌÉú',
      'Î∞∞Ïö∞ÏûêÏù¥Î¶Ñ',
      'Í≤∞ÌòºÏùº'
    ];
    
    const sampleData = [
      'ÌôçÍ∏∏Îèô',
      'Hong Gil Dong',
      'hong@email.com',
      'ÎÇ®',
      '1990-01-01',
      '010-1234-5678',
      'ÏÑúÏö∏Ïãú Í∞ïÎÇ®Íµ¨',
      'ÏßëÏÇ¨',
      '1Íµ¨Ïó≠',
      'WORSHIP',
      'DEACON',
      '2020-01-01',
      'Ï§ëÏïôÍµêÌöå',
      'ÌöåÏÇ¨Ïõê',
      'ÏÇºÏÑ±Ï†ÑÏûê',
      '02-1234-5678',
      'Í∏∞Ìòº',
      'ÍπÄÏòÅÌù¨',
      '2015-05-20'
    ];
    
    // CSV ÌòïÏãùÏúºÎ°ú ÏÉùÏÑ±
    const csvContent = [
      headers.join(','),
      sampleData.join(',')
    ].join('\n');
    
    // BOMÏùÑ Ï∂îÍ∞ÄÌïòÏó¨ ÌïúÍ∏Ä Ïù∏ÏΩîÎî© Î¨∏Ï†ú Ìï¥Í≤∞
    const BOM = '\uFEFF';
    const blob = new Blob([BOM + csvContent], { 
      type: 'text/csv;charset=utf-8;' 
    });
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'ÍµêÏù∏Ï†ïÎ≥¥_ÏóëÏÖÄÌÖúÌîåÎ¶ø.csv';
    link.click();
    
    URL.revokeObjectURL(link.href);
  };

  const handleExcelImport = async () => {
    if (!excelFile) {
      alert('ÌååÏùºÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }
    
    setIsImporting(true);
    
    try {
      const formData = new FormData();
      formData.append('file', excelFile);
      
      const response = await api.post('/members/bulk-import', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      
      alert(`Ï¥ù ${response.data.imported_count}Î™ÖÏùò ÍµêÏù∏Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Îì±Î°ùÎêòÏóàÏäµÎãàÎã§.`);
      setShowExcelImportModal(false);
      setExcelFile(null);
      fetchMembers(); // Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
    } catch (error: any) {
      console.error('ÏóëÏÖÄ Îì±Î°ù Ïã§Ìå®:', error);
      const errorMessage = error.response?.data?.detail || 'ÏóëÏÖÄ Îì±Î°ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.';
      alert(`ÏóëÏÖÄ Îì±Î°ù Ïã§Ìå®: ${errorMessage}`);
    } finally {
      setIsImporting(false);
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'active': return 'ÌôúÎèô';
      case 'inactive': return 'ÎπÑÌôúÎèô';
      case 'transferred': return 'Ïù¥Ï†Ñ';
      default: return status;
    }
  };

  // Clean photo URL - handle both relative and absolute URLs
  const cleanPhotoUrl = (url: string | null) => {
    if (!url) return null;
    // Remove trailing '?' if present
    const cleanedUrl = url.endsWith('?') ? url.slice(0, -1) : url;
    
    // If it's already a full URL (starts with http:// or https://), return as-is
    if (cleanedUrl.startsWith('http://') || cleanedUrl.startsWith('https://')) {
      return cleanedUrl;
    }
    
    // Otherwise, prepend the API base URL
    return `${process.env.REACT_APP_API_URL}${cleanedUrl}`;
  };

  if (loading) {
    return <div className="flex justify-center items-center h-64">
      <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-indigo-500"></div>
    </div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-3xl font-bold tracking-tight text-foreground">ÍµêÏù∏ Í¥ÄÎ¶¨</h2>
        <div className="flex gap-2">
          <Button 
            onClick={downloadExcelTemplate}
            variant="outline"
            className="flex items-center gap-2"
          >
            <Download className="w-4 h-4" />
            ÏóëÏÖÄ ÌÖúÌîåÎ¶ø Îã§Ïö¥Î°úÎìú
          </Button>
          <Button 
            onClick={() => setShowExcelImportModal(true)}
            variant="outline"
            className="flex items-center gap-2"
          >
            <Upload className="w-4 h-4" />
            ÏóëÏÖÄ ÏùºÍ¥Ñ Îì±Î°ù
          </Button>
          <Button 
            onClick={() => setShowAddMemberModal(true)}
            className="flex items-center gap-2"
          >
            <Plus className="w-4 h-4" />
            ÍµêÏù∏ Ï∂îÍ∞Ä
          </Button>
        </div>
      </div>

      {/* Search and Filter */}
      <Card className="border-muted">
        <CardContent className="p-6 space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label className="block text-sm font-medium text-foreground mb-1">Í≤ÄÏÉâ</label>
              <div className="flex gap-2">
                <Input
                  type="text"
                  placeholder="Ïù¥Î¶Ñ ÎòêÎäî Ï†ÑÌôîÎ≤àÌò∏ (Ï¥àÏÑ± Í≤ÄÏÉâ Í∞ÄÎä•: „Ñ±„Öä„ÖÖ)"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  onKeyPress={handleKeyPress}
                  className="flex-1"
                />
                <Button
                  onClick={handleSearch}
                  className="flex items-center gap-2"
                >
                  <Search className="w-4 h-4" />
                  Í≤ÄÏÉâ
                </Button>
                <Button
                  onClick={() => setShowAdvancedSearch(true)}
                  variant="outline"
                  className="flex items-center gap-2"
                >
                  <Settings className="w-4 h-4" />
                  ÏÉÅÏÑ∏Í≤ÄÏÉâ
                </Button>
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-foreground mb-1">ÏÉÅÌÉú</label>
              <Select value={statusFilter} onValueChange={setStatusFilter}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Ï†ÑÏ≤¥</SelectItem>
                  <SelectItem value="active">ÌôúÎèô</SelectItem>
                  <SelectItem value="inactive">ÎπÑÌôúÎèô</SelectItem>
                  <SelectItem value="transferred">Ïù¥Ï†Ñ</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="flex items-end">
              <Button
                onClick={fetchMembers}
                variant="secondary"
                className="flex items-center gap-2"
              >
                <RefreshCw className="w-4 h-4" />
                ÏÉàÎ°úÍ≥†Ïπ®
              </Button>
            </div>
          </div>
          
          {/* View Options */}
          <div className="flex justify-between items-center border-t border-border pt-4">
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2">
                <label className="text-sm font-medium text-foreground">ÌéòÏù¥ÏßÄÎãπ:</label>
                <Select
                  value={pageSize.toString()}
                  onValueChange={(value) => {
                    setPageSize(Number(value));
                    setCurrentPage(1);
                  }}
                >
                  <SelectTrigger className="w-20">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="10">10Í∞ú</SelectItem>
                    <SelectItem value="20">20Í∞ú</SelectItem>
                    <SelectItem value="30">30Í∞ú</SelectItem>
                    <SelectItem value="40">40Í∞ú</SelectItem>
                    <SelectItem value="50">50Í∞ú</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            <div className="text-sm text-muted-foreground">
              Ï†ÑÏ≤¥ {totalCount}Î™Ö Ï§ë {Math.min((currentPage - 1) * pageSize + 1, totalCount)}-{Math.min(currentPage * pageSize, totalCount)}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Members Display */}
      <Card className="border-muted overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full">
            <thead className="bg-muted/50">
              <tr>
                <th 
                  className="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider cursor-pointer hover:bg-muted"
                  onClick={() => handleSort('name')}
                >
                  <span className="flex items-center gap-1">
                    Ïù¥Î¶Ñ
                    {sortField === 'name' && (
                      sortOrder === 'asc' ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />
                    )}
                  </span>
                </th>
                <th 
                  className="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider cursor-pointer hover:bg-muted"
                  onClick={() => handleSort('gender')}
                >
                  <span className="flex items-center gap-1">
                    ÏÑ±Î≥Ñ
                    {sortField === 'gender' && (
                      sortOrder === 'asc' ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />
                    )}
                  </span>
                </th>
                <th 
                  className="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider cursor-pointer hover:bg-muted"
                  onClick={() => handleSort('phone')}
                >
                  <span className="flex items-center gap-1">
                    Ï†ÑÌôîÎ≤àÌò∏
                    {sortField === 'phone' && (
                      sortOrder === 'asc' ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />
                    )}
                  </span>
                </th>
                <th 
                  className="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider cursor-pointer hover:bg-muted"
                  onClick={() => handleSort('position')}
                >
                  <span className="flex items-center gap-1">
                    ÏßÅÎ∂Ñ
                    {sortField === 'position' && (
                      sortOrder === 'asc' ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />
                    )}
                  </span>
                </th>
                <th 
                  className="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider cursor-pointer hover:bg-muted"
                  onClick={() => handleSort('district')}
                >
                  <span className="flex items-center gap-1">
                    Íµ¨Ïó≠
                    {sortField === 'district' && (
                      sortOrder === 'asc' ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />
                    )}
                  </span>
                </th>
                <th 
                  className="px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider cursor-pointer hover:bg-muted"
                  onClick={() => handleSort('member_status')}
                >
                  <span className="flex items-center gap-1">
                    ÏÉÅÌÉú
                    {sortField === 'member_status' && (
                      sortOrder === 'asc' ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />
                    )}
                  </span>
                </th>
              </tr>
            </thead>
            <tbody className="bg-background divide-y divide-border">
              {members.map((member) => (
                <tr key={member.id} className="hover:bg-muted/30 cursor-pointer" 
                    onClick={() => handleMemberClick(member)}>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <div className="flex-shrink-0 h-10 w-10">
                        {cleanPhotoUrl(member.profile_photo_url) ? (
                          <img
                            className="h-10 w-10 rounded-full object-cover"
                            src={cleanPhotoUrl(member.profile_photo_url)!}
                            alt={member.name}
                            onError={(e) => {
                              const target = e.currentTarget as HTMLImageElement;
                              target.style.display = 'none';
                              const fallback = target.nextElementSibling as HTMLElement;
                              if (fallback) {
                                fallback.classList.remove('hidden');
                              }
                            }}
                          />
                        ) : null}
                        <div className={`h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center ${cleanPhotoUrl(member.profile_photo_url) ? 'hidden' : ''}`}>
                          <User className="w-5 h-5 text-gray-600" />
                        </div>
                      </div>
                      <div className="ml-4">
                        <div className="text-sm font-medium text-foreground">{member.name}</div>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-muted-foreground">
                    {getGenderText(member.gender)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-muted-foreground">
                    {member.phone}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-muted-foreground">
                    {member.position || '-'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-muted-foreground">
                    {member.district || '-'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <Badge variant={getStatusBadgeVariant(member.member_status)}>
                      {getStatusText(member.member_status)}
                    </Badge>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </Card>

      {members.length === 0 && (
        <div className="text-center py-12">
          <p className="text-muted-foreground">Îì±Î°ùÎêú ÍµêÏù∏Ïù¥ ÏóÜÏäµÎãàÎã§.</p>
        </div>
      )}

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="flex justify-center items-center space-x-2 mt-6">
          <Button
            onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
            disabled={currentPage === 1}
            variant="outline"
            size="sm"
            className="flex items-center gap-1"
          >
            <ChevronLeft className="w-4 h-4" />
            Ïù¥Ï†Ñ
          </Button>
          
          {/* Page numbers */}
          {[...Array(Math.min(5, totalPages))].map((_, idx) => {
            let pageNum = idx + 1;
            if (totalPages > 5) {
              if (currentPage > 3) {
                pageNum = currentPage - 2 + idx;
                if (pageNum > totalPages) return null;
              }
            }
            return (
              <Button
                key={pageNum}
                onClick={() => setCurrentPage(pageNum)}
                variant={currentPage === pageNum ? 'default' : 'outline'}
                size="sm"
              >
                {pageNum}
              </Button>
            );
          })}
          
          <Button
            onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
            disabled={currentPage === totalPages}
            variant="outline"
            size="sm"
            className="flex items-center gap-1"
          >
            Îã§Ïùå
            <ChevronRight className="w-4 h-4" />
          </Button>
        </div>
      )}

      {/* Add Member Modal */}
      <Dialog open={showAddModal} onOpenChange={setShowAddModal}>
        <DialogContent className="max-w-md max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>ÏÉà ÍµêÏù∏ Îì±Î°ù</DialogTitle>
            <DialogDescription>
              ÏÉà ÍµêÏù∏Ïùò Í∏∞Î≥∏ Ï†ïÎ≥¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.
            </DialogDescription>
          </DialogHeader>
          <form onSubmit={handleAddMember} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-foreground mb-1">Ïù¥Î¶Ñ *</label>
              <Input
                type="text"
                required
                value={newMember.name}
                onChange={(e) => setNewMember({...newMember, name: e.target.value})}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-foreground mb-1">Ïù¥Î©îÏùº *</label>
              <Input
                type="email"
                required
                placeholder="example@email.com"
                value={newMember.email}
                onChange={(e) => setNewMember({...newMember, email: e.target.value})}
              />
              <p className="text-xs text-muted-foreground mt-1">Ïù¥Î©îÏùºÎ°ú ÏûÑÏãú ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä Î∞úÏÜ°Îê©ÎãàÎã§.</p>
            </div>
            <div>
              <label className="block text-sm font-medium text-foreground mb-1">ÏÑ±Î≥Ñ</label>
              <Select value={newMember.gender} onValueChange={(value) => setNewMember({...newMember, gender: value})}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="ÎÇ®">ÎÇ®</SelectItem>
                  <SelectItem value="Ïó¨">Ïó¨</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <label className="block text-sm font-medium text-foreground mb-1">ÏÉùÎÖÑÏõîÏùº</label>
              <Input
                type="date"
                value={newMember.birthdate}
                onChange={(e) => setNewMember({...newMember, birthdate: e.target.value})}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-foreground mb-1">Ï†ÑÌôîÎ≤àÌò∏ *</label>
              <Input
                type="tel"
                required
                placeholder="010-1234-5678"
                value={newMember.phone}
                onChange={(e) => setNewMember({...newMember, phone: e.target.value})}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-foreground mb-1">Ï£ºÏÜå</label>
              <Input
                type="text"
                value={newMember.address}
                onChange={(e) => setNewMember({...newMember, address: e.target.value})}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-foreground mb-1">ÏßÅÎ∂Ñ</label>
              <Input
                type="text"
                placeholder="ÏßëÏÇ¨, Í∂åÏÇ¨, Ïû•Î°ú Îì±"
                value={newMember.position}
                onChange={(e) => setNewMember({...newMember, position: e.target.value})}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-foreground mb-1">Íµ¨Ïó≠</label>
              <Input
                type="text"
                placeholder="1Íµ¨Ïó≠, 2Íµ¨Ïó≠ Îì±"
                value={newMember.district}
                onChange={(e) => setNewMember({...newMember, district: e.target.value})}
              />
            </div>
            <div className="flex justify-end space-x-3 pt-4">
              <Button
                type="button"
                variant="outline"
                onClick={() => setShowAddModal(false)}
              >
                Ï∑®ÏÜå
              </Button>
              <Button type="submit">
                Îì±Î°ù
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>

      {/* Photo Management Modal */}
      <Dialog open={showPhotoModal} onOpenChange={setShowPhotoModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>
              {selectedMember?.name}Îãò ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑ Í¥ÄÎ¶¨
            </DialogTitle>
            <DialogDescription>
              ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑÏùÑ ÏóÖÎ°úÎìúÌïòÍ±∞ÎÇò ÏÇ≠Ï†úÌï† Ïàò ÏûàÏäµÎãàÎã§.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            {selectedMember && cleanPhotoUrl(selectedMember.profile_photo_url) && (
              <div className="text-center">
                <img
                  src={cleanPhotoUrl(selectedMember.profile_photo_url)!}
                  alt={selectedMember.name}
                  className="h-32 w-32 rounded-full object-cover mx-auto mb-2"
                  onError={(e) => {
                    console.error('Modal image load error:', e);
                    alert('ÏÇ¨ÏßÑÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
                  }}
                />
                <Button
                  onClick={() => selectedMember && handleDeletePhoto(selectedMember.id)}
                  variant="destructive"
                  size="sm"
                  className="flex items-center gap-1"
                >
                  <Trash2 className="w-4 h-4" />
                  ÌòÑÏû¨ ÏÇ¨ÏßÑ ÏÇ≠Ï†ú
                </Button>
              </div>
            )}

            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                ÏÉà ÏÇ¨ÏßÑ ÏóÖÎ°úÎìú
              </label>
              <Input
                type="file"
                accept="image/*"
                onChange={(e) => {
                  const file = e.target.files?.[0];
                  if (file) handlePhotoUpload(file);
                }}
              />
              <p className="text-xs text-muted-foreground mt-1">
                JPG, PNG, GIF, WEBP ÌååÏùºÎßå Í∞ÄÎä• (ÏµúÎåÄ 5MB)
              </p>
            </div>

            <div className="flex justify-end">
              <Button
                onClick={() => setShowPhotoModal(false)}
                variant="outline"
              >
                Îã´Í∏∞
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Password View Modal */}
      <Dialog open={showPasswordModal} onOpenChange={setShowPasswordModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>
              {passwordInfo?.member_name}Îãò Í≥ÑÏ†ï Ï†ïÎ≥¥
            </DialogTitle>
            <DialogDescription>
              ÍµêÏù∏Ïùò Î°úÍ∑∏Ïù∏ Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            {passwordInfo && (
              <>
                <div>
                  <label className="block text-sm font-medium text-foreground">Ïù¥Î©îÏùº</label>
                  <p className="mt-1 text-sm text-foreground">{passwordInfo.email}</p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-foreground mb-1">ÎπÑÎ∞ÄÎ≤àÌò∏</label>
                  <div className="flex items-center space-x-2">
                    <Input
                      type={showPassword ? "text" : "password"}
                      value={passwordInfo.password}
                      readOnly
                      className="flex-1 bg-muted"
                    />
                    <Button
                      onClick={() => setShowPassword(!showPassword)}
                      variant="ghost"
                      size="icon"
                    >
                      {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                    </Button>
                  </div>
                </div>
                
                <div className="bg-yellow-50 border border-yellow-200 rounded-md p-3">
                  <p className="text-sm text-yellow-800">
                    <strong>Ï£ºÏùò:</strong> Ïù¥ ÎπÑÎ∞ÄÎ≤àÌò∏Îäî ÍµêÏù∏Ïùò Í∞úÏù∏Ï†ïÎ≥¥ÏûÖÎãàÎã§. Î∞òÎìúÏãú ÌïÑÏöîÌïú Í≤ΩÏö∞ÏóêÎßå ÌôïÏù∏ÌïòÍ≥†, ÌÉÄÏù∏ÏóêÍ≤å Í≥µÏú†ÌïòÏßÄ ÎßàÏÑ∏Ïöî.
                  </p>
                </div>
              </>
            )}

            <div className="flex justify-end space-x-2">
              <Button
                onClick={() => {
                  if (passwordInfo) {
                    navigator.clipboard.writeText(passwordInfo.password);
                    alert('ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§.');
                  }
                }}
                variant="secondary"
              >
                Î≥µÏÇ¨
              </Button>
              <Button
                onClick={() => {
                  setShowPasswordModal(false);
                  setPasswordInfo(null);
                  setShowPassword(false);
                }}
                variant="outline"
              >
                Îã´Í∏∞
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Member Detail Modal */}
      <Dialog open={showDetailModal} onOpenChange={setShowDetailModal}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <div className="flex items-start justify-between mb-2">
              <DialogTitle className="flex items-center gap-2 flex-1">
                <User className="w-5 h-5" />
                {selectedMember?.name}Îãò ÏÉÅÏÑ∏Ï†ïÎ≥¥
              </DialogTitle>
              <DialogDescription className="sr-only">
                ÍµêÏù∏Ïùò ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º Î≥¥Í≥† ÏàòÏ†ïÌï† Ïàò ÏûàÏäµÎãàÎã§.
              </DialogDescription>
            </div>
            <div className="flex justify-end gap-2 -mt-2 mb-4">
              {!isEditMode ? (
                <>
                  <Button
                    onClick={handleEditMember}
                    variant="outline"
                    size="sm"
                    className="flex items-center gap-1"
                  >
                    <Edit3 className="w-4 h-4" />
                    ÏàòÏ†ï
                  </Button>
                  <Button
                    onClick={handleDeleteClick}
                    variant="destructive"
                    size="sm"
                    className="flex items-center gap-1"
                  >
                    <Trash2 className="w-4 h-4" />
                    ÏÇ≠Ï†ú
                  </Button>
                </>
              ) : (
                <>
                  <Button
                    onClick={handleSaveMember}
                    variant="default"
                    size="sm"
                    className="flex items-center gap-1"
                  >
                    <Save className="w-4 h-4" />
                    Ï†ÄÏû•
                  </Button>
                  <Button
                    onClick={handleCancelEdit}
                    variant="outline"
                    size="sm"
                    className="flex items-center gap-1"
                  >
                    <X className="w-4 h-4" />
                    Ï∑®ÏÜå
                  </Button>
                </>
              )}
            </div>
          </DialogHeader>

          {selectedMember && (
            <div className="space-y-8">
              {/* Profile Photo & Status Section */}
              <div className="text-center">
                <div className="relative inline-block">
                  {cleanPhotoUrl(selectedMember.profile_photo_url) ? (
                    <img
                      src={cleanPhotoUrl(selectedMember.profile_photo_url)!}
                      alt={selectedMember.name}
                      className="h-32 w-32 rounded-full object-cover mx-auto border-4 border-border"
                    />
                  ) : (
                    <div className="h-32 w-32 rounded-full bg-muted flex items-center justify-center mx-auto border-4 border-border">
                      <User className="w-16 h-16 text-muted-foreground" />
                    </div>
                  )}
                </div>
                <div className="mt-3 flex items-center justify-center gap-2">
                  <Badge variant={getStatusBadgeVariant(selectedMember.member_status)} className="text-sm px-3 py-1">
                    {getStatusText(selectedMember.member_status)}
                  </Badge>
                  {selectedMember.registration_date && (
                    <span className="text-sm text-muted-foreground">
                      Îì±Î°ùÏùº: {new Date(selectedMember.registration_date).toLocaleDateString()}
                    </span>
                  )}
                </div>
              </div>

              {/* Í∏∞Î≥∏ Ï†ïÎ≥¥ */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <div className="space-y-6">
                  <div className="bg-muted/30 rounded-lg p-4">
                    <h3 className="text-lg font-semibold text-foreground mb-4 flex items-center gap-2">
                      <User className="w-5 h-5" />
                      Í∏∞Î≥∏ Ï†ïÎ≥¥
                    </h3>
                    <div className="space-y-4">
                      {/* Ïù¥Î¶Ñ */}
                      <div>
                        <label className="block text-sm font-medium text-foreground mb-1">Ïù¥Î¶Ñ</label>
                        {isEditMode ? (
                          <Input
                            value={editedMember.name || ''}
                            onChange={(e) => setEditedMember({...editedMember, name: e.target.value})}
                            placeholder="ÌôçÍ∏∏Îèô"
                          />
                        ) : (
                          <p className="text-sm text-muted-foreground">{selectedMember.name}</p>
                        )}
                      </div>

                      {/* ÏòÅÎ¨∏Î™Ö */}
                      <div>
                        <label className="block text-sm font-medium text-foreground mb-1">ÏòÅÎ¨∏Î™Ö</label>
                        {isEditMode ? (
                          <Input
                            value={editedMember.name_eng || ''}
                            onChange={(e) => setEditedMember({...editedMember, name_eng: e.target.value})}
                            placeholder="Hong Gil Dong"
                          />
                        ) : (
                          <p className="text-sm text-muted-foreground">{selectedMember.name_eng || '-'}</p>
                        )}
                      </div>

                      {/* Ïù¥Î©îÏùº */}
                      <div>
                        <label className="block text-sm font-medium text-foreground mb-1">Ïù¥Î©îÏùº</label>
                        {isEditMode ? (
                          <Input
                            type="email"
                            value={editedMember.email || ''}
                            onChange={(e) => setEditedMember({...editedMember, email: e.target.value})}
                            placeholder="example@email.com"
                          />
                        ) : (
                          <p className="text-sm text-muted-foreground">{selectedMember.email}</p>
                        )}
                      </div>

                      {/* Ï†ÑÌôîÎ≤àÌò∏ */}
                      <div>
                        <label className="block text-sm font-medium text-foreground mb-1">Ï†ÑÌôîÎ≤àÌò∏</label>
                        {isEditMode ? (
                          <Input
                            type="tel"
                            value={editedMember.phone || ''}
                            onChange={(e) => setEditedMember({...editedMember, phone: e.target.value})}
                            placeholder="010-1234-5678"
                          />
                        ) : (
                          <p className="text-sm text-muted-foreground">{selectedMember.phone}</p>
                        )}
                      </div>

                      {/* ÏÑ±Î≥Ñ */}
                      <div>
                        <label className="block text-sm font-medium text-foreground mb-1">ÏÑ±Î≥Ñ</label>
                        {isEditMode ? (
                          <Select value={editedMember.gender || ''} onValueChange={(value) => setEditedMember({...editedMember, gender: value})}>
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="ÎÇ®">ÎÇ®</SelectItem>
                              <SelectItem value="Ïó¨">Ïó¨</SelectItem>
                            </SelectContent>
                          </Select>
                        ) : (
                          <p className="text-sm text-muted-foreground">{selectedMember.gender}</p>
                        )}
                      </div>

                      {/* ÏÉùÎÖÑÏõîÏùº */}
                      <div>
                        <label className="block text-sm font-medium text-foreground mb-1">ÏÉùÎÖÑÏõîÏùº</label>
                        {isEditMode ? (
                          <Input
                            type="date"
                            value={editedMember.birthdate || ''}
                            onChange={(e) => setEditedMember({...editedMember, birthdate: e.target.value})}
                          />
                        ) : (
                          <p className="text-sm text-muted-foreground">{selectedMember.birthdate || '-'}</p>
                        )}
                      </div>
                    </div>
                  </div>
                </div>

                <div className="space-y-6">
                  {/* ÍµêÌöå Ï†ïÎ≥¥ */}
                  <div className="bg-primary/5 rounded-lg p-4">
                    <h3 className="text-lg font-semibold text-foreground mb-4 flex items-center gap-2">
                      <UserCheck className="w-5 h-5" />
                      ÍµêÌöå Ï†ïÎ≥¥
                    </h3>
                    <div className="space-y-4">
                      {/* ÏßÅÎ∂Ñ */}
                      <div>
                        <label className="block text-sm font-medium text-foreground mb-1">ÏßÅÎ∂Ñ</label>
                        {isEditMode ? (
                          <Input
                            value={editedMember.position || ''}
                            onChange={(e) => setEditedMember({...editedMember, position: e.target.value})}
                            placeholder="ÏßëÏÇ¨, Í∂åÏÇ¨, Ïû•Î°ú Îì±"
                          />
                        ) : (
                          <p className="text-sm text-muted-foreground">{selectedMember.position || '-'}</p>
                        )}
                      </div>

                      {/* Íµ¨Ïó≠ */}
                      <div>
                        <label className="block text-sm font-medium text-foreground mb-1">Íµ¨Ïó≠</label>
                        {isEditMode ? (
                          <Input
                            value={editedMember.district || ''}
                            onChange={(e) => setEditedMember({...editedMember, district: e.target.value})}
                            placeholder="1Íµ¨Ïó≠, 2Íµ¨Ïó≠ Îì±"
                          />
                        ) : (
                          <p className="text-sm text-muted-foreground">{selectedMember.district || '-'}</p>
                        )}
                      </div>

                      {/* Î∂ÄÏÑú */}
                      <div>
                        <label className="block text-sm font-medium text-foreground mb-1">Î∂ÄÏÑú</label>
                        {isEditMode ? (
                          <Select value={editedMember.department_code || ''} onValueChange={(value) => setEditedMember({...editedMember, department_code: value})}>
                            <SelectTrigger>
                              <SelectValue placeholder="Î∂ÄÏÑú ÏÑ†ÌÉù" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="WORSHIP">ÏòàÎ∞∞Î∂Ä</SelectItem>
                              <SelectItem value="EDUCATION">ÍµêÏú°Î∂Ä</SelectItem>
                              <SelectItem value="MISSION">ÏÑ†ÍµêÎ∂Ä</SelectItem>
                              <SelectItem value="YOUTH">Ï≤≠ÎÖÑÎ∂Ä</SelectItem>
                              <SelectItem value="CHILDREN">ÏïÑÎèôÎ∂Ä</SelectItem>
                            </SelectContent>
                          </Select>
                        ) : (
                          <p className="text-sm text-muted-foreground">
                            {selectedMember.department_code ? 
                              ({'WORSHIP': 'ÏòàÎ∞∞Î∂Ä', 'EDUCATION': 'ÍµêÏú°Î∂Ä', 'MISSION': 'ÏÑ†ÍµêÎ∂Ä', 'YOUTH': 'Ï≤≠ÎÖÑÎ∂Ä', 'CHILDREN': 'ÏïÑÎèôÎ∂Ä'}[selectedMember.department_code] || selectedMember.department_code) 
                              : '-'
                            }
                          </p>
                        )}
                      </div>

                      {/* ÏßÅÎ∂Ñ ÏΩîÎìú */}
                      <div>
                        <label className="block text-sm font-medium text-foreground mb-1">ÏßÅÎ∂Ñ Î∂ÑÎ•ò</label>
                        {isEditMode ? (
                          <Select value={editedMember.position_code || ''} onValueChange={(value) => setEditedMember({...editedMember, position_code: value})}>
                            <SelectTrigger>
                              <SelectValue placeholder="ÏßÅÎ∂Ñ ÏÑ†ÌÉù" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="PASTOR">Î™©ÏÇ¨</SelectItem>
                              <SelectItem value="ELDER">Ïû•Î°ú</SelectItem>
                              <SelectItem value="DEACON">ÏßëÏÇ¨</SelectItem>
                              <SelectItem value="TEACHER">ÍµêÏÇ¨</SelectItem>
                              <SelectItem value="LEADER">Î∂ÄÏû•/ÌöåÏû•</SelectItem>
                            </SelectContent>
                          </Select>
                        ) : (
                          <p className="text-sm text-muted-foreground">
                            {selectedMember.position_code ? 
                              ({'PASTOR': 'Î™©ÏÇ¨', 'ELDER': 'Ïû•Î°ú', 'DEACON': 'ÏßëÏÇ¨', 'TEACHER': 'ÍµêÏÇ¨', 'LEADER': 'Î∂ÄÏû•/ÌöåÏû•'}[selectedMember.position_code] || selectedMember.position_code) 
                              : '-'
                            }
                          </p>
                        )}
                      </div>

                      {/* ÏûÑÎ™ÖÏùº */}
                      <div>
                        <label className="block text-sm font-medium text-foreground mb-1">ÏûÑÎ™ÖÏùº</label>
                        {isEditMode ? (
                          <Input
                            type="date"
                            value={editedMember.appointed_on || ''}
                            onChange={(e) => setEditedMember({...editedMember, appointed_on: e.target.value})}
                          />
                        ) : (
                          <p className="text-sm text-muted-foreground">{selectedMember.appointed_on || '-'}</p>
                        )}
                      </div>

                      {/* ÏïàÏàòÍµêÌöå */}
                      <div>
                        <label className="block text-sm font-medium text-foreground mb-1">ÏïàÏàòÍµêÌöå</label>
                        {isEditMode ? (
                          <Input
                            value={editedMember.ordination_church || ''}
                            onChange={(e) => setEditedMember({...editedMember, ordination_church: e.target.value})}
                            placeholder="Ï§ëÏïôÍµêÌöå"
                          />
                        ) : (
                          <p className="text-sm text-muted-foreground">{selectedMember.ordination_church || '-'}</p>
                        )}
                      </div>

                      {/* ÏÉÅÌÉú */}
                      <div>
                        <label className="block text-sm font-medium text-foreground mb-1">ÏÉÅÌÉú</label>
                        {isEditMode ? (
                          <Select value={editedMember.member_status || ''} onValueChange={(value) => setEditedMember({...editedMember, member_status: value})}>
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="active">ÌôúÎèô</SelectItem>
                              <SelectItem value="inactive">ÎπÑÌôúÎèô</SelectItem>
                              <SelectItem value="transferred">Ïù¥Ï†Ñ</SelectItem>
                            </SelectContent>
                          </Select>
                        ) : (
                          <p className="text-sm text-muted-foreground">{getStatusText(selectedMember.member_status)}</p>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* ÏÇ¨Ïó≠ Î∞è ÏßÅÏóÖ Ï†ïÎ≥¥ */}
              <div className="bg-blue-50/50 rounded-lg p-6">
                <h3 className="text-lg font-semibold text-foreground mb-4 flex items-center gap-2">
                  <Briefcase className="w-5 h-5" />
                  ÏÇ¨Ïó≠ Î∞è ÏßÅÏóÖ Ï†ïÎ≥¥
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {/* ÏßÅÏóÖ */}
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-1">ÏßÅÏóÖ</label>
                    {isEditMode ? (
                      <Input
                        value={editedMember.job_title || ''}
                        onChange={(e) => setEditedMember({...editedMember, job_title: e.target.value})}
                        placeholder="ÌöåÏÇ¨Ïõê, ÍµêÏÇ¨ Îì±"
                      />
                    ) : (
                      <p className="text-sm text-muted-foreground">{selectedMember.job_title || '-'}</p>
                    )}
                  </div>

                  {/* ÏßÅÏû•Î™Ö */}
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-1">ÏßÅÏû•Î™Ö</label>
                    {isEditMode ? (
                      <Input
                        value={editedMember.workplace || ''}
                        onChange={(e) => setEditedMember({...editedMember, workplace: e.target.value})}
                        placeholder="ÏÇºÏÑ±Ï†ÑÏûê"
                      />
                    ) : (
                      <p className="text-sm text-muted-foreground">{selectedMember.workplace || '-'}</p>
                    )}
                  </div>

                  {/* ÏßÅÏû• Ï†ÑÌôîÎ≤àÌò∏ */}
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-1">ÏßÅÏû• Ï†ÑÌôîÎ≤àÌò∏</label>
                    {isEditMode ? (
                      <Input
                        type="tel"
                        value={editedMember.workplace_phone || ''}
                        onChange={(e) => setEditedMember({...editedMember, workplace_phone: e.target.value})}
                        placeholder="02-1234-5678"
                      />
                    ) : (
                      <p className="text-sm text-muted-foreground">{selectedMember.workplace_phone || '-'}</p>
                    )}
                  </div>
                </div>
              </div>

              {/* Í∞úÏù∏ Î∞è Í∞ÄÏ°± Ï†ïÎ≥¥ */}
              <div className="bg-green-50/50 rounded-lg p-6">
                <h3 className="text-lg font-semibold text-foreground mb-4 flex items-center gap-2">
                  <Heart className="w-5 h-5" />
                  Í∞úÏù∏ Î∞è Í∞ÄÏ°± Ï†ïÎ≥¥
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {/* Í≤∞Ìòº ÏÉÅÌÉú */}
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-1">Í≤∞Ìòº ÏÉÅÌÉú</label>
                    {isEditMode ? (
                      <Select value={editedMember.marital_status || ''} onValueChange={(value) => setEditedMember({...editedMember, marital_status: value})}>
                        <SelectTrigger>
                          <SelectValue placeholder="ÏÉÅÌÉú ÏÑ†ÌÉù" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="ÎØ∏Ìòº">ÎØ∏Ìòº</SelectItem>
                          <SelectItem value="Í∏∞Ìòº">Í∏∞Ìòº</SelectItem>
                          <SelectItem value="Ïù¥Ìòº">Ïù¥Ìòº</SelectItem>
                          <SelectItem value="ÏÇ¨Î≥Ñ">ÏÇ¨Î≥Ñ</SelectItem>
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-muted-foreground">{selectedMember.marital_status || '-'}</p>
                    )}
                  </div>

                  {/* Î∞∞Ïö∞Ïûê Ïù¥Î¶Ñ */}
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-1">Î∞∞Ïö∞Ïûê Ïù¥Î¶Ñ</label>
                    {isEditMode ? (
                      <Input
                        value={editedMember.spouse_name || ''}
                        onChange={(e) => setEditedMember({...editedMember, spouse_name: e.target.value})}
                        placeholder="Î∞∞Ïö∞Ïûê Ïù¥Î¶Ñ"
                      />
                    ) : (
                      <p className="text-sm text-muted-foreground">{selectedMember.spouse_name || '-'}</p>
                    )}
                  </div>

                  {/* Í≤∞ÌòºÏùº */}
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-1">Í≤∞ÌòºÏùº</label>
                    {isEditMode ? (
                      <Input
                        type="date"
                        value={editedMember.married_on || ''}
                        onChange={(e) => setEditedMember({...editedMember, married_on: e.target.value})}
                      />
                    ) : (
                      <p className="text-sm text-muted-foreground">{selectedMember.married_on || '-'}</p>
                    )}
                  </div>
                </div>
              </div>

              {/* Ï£ºÏÜå Ï†ïÎ≥¥ */}
              <div className="bg-yellow-50/50 rounded-lg p-6">
                <h3 className="text-lg font-semibold text-foreground mb-4 flex items-center gap-2">
                  <MapPin className="w-5 h-5" />
                  Ï£ºÏÜå Ï†ïÎ≥¥
                </h3>
                <div>
                  <label className="block text-sm font-medium text-foreground mb-1">Ï£ºÏÜå</label>
                  {isEditMode ? (
                    <Textarea
                      value={editedMember.address || ''}
                      onChange={(e) => setEditedMember({...editedMember, address: e.target.value})}
                      placeholder="ÏÉÅÏÑ∏ Ï£ºÏÜå ÏûÖÎ†•"
                      rows={3}
                    />
                  ) : (
                    <p className="text-sm text-muted-foreground whitespace-pre-wrap">
                      {selectedMember.address || '-'}
                    </p>
                  )}
                </div>
              </div>

              {/* Action Buttons */}
              {!isEditMode && (
                <div className="flex gap-3 pt-6 border-t border-border">
                  <Button
                    onClick={(e) => {
                      e.stopPropagation();
                      setShowPhotoModal(true);
                    }}
                    variant="outline"
                    className="flex-1"
                  >
                    <Camera className="w-4 h-4 mr-2" />
                    ÏÇ¨ÏßÑ Í¥ÄÎ¶¨
                  </Button>
                  <Button
                    onClick={(e) => {
                      e.stopPropagation();
                      navigate('/qr-management');
                    }}
                    variant="outline"
                    className="flex-1"
                  >
                    <QrCode className="w-4 h-4 mr-2" />
                    QR ÏΩîÎìú
                  </Button>
                  <Button
                    onClick={(e) => {
                      e.stopPropagation();
                      handleGetPassword(selectedMember.id);
                    }}
                    variant="outline"
                    className="flex-1"
                  >
                    <Key className="w-4 h-4 mr-2" />
                    ÎπÑÎ∞ÄÎ≤àÌò∏ Ï°∞Ìöå
                  </Button>
                </div>
              )}
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation Modal */}
      <Dialog open={showDeleteConfirm} onOpenChange={setShowDeleteConfirm}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Trash2 className="w-5 h-5 text-destructive" />
              ÍµêÏù∏ Ï†ïÎ≥¥ ÏÇ≠Ï†ú
            </DialogTitle>
            <DialogDescription>
              ÍµêÏù∏ Ï†ïÎ≥¥Î•º ÏòÅÍµ¨Ï†ÅÏúºÎ°ú ÏÇ≠Ï†úÌï©ÎãàÎã§. Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <p className="text-sm text-foreground">
              <strong>{selectedMember?.name}Îãò</strong>Ïùò Ï†ïÎ≥¥Î•º Ï†ïÎßêÎ°ú ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?
            </p>
            <div className="bg-destructive/10 border border-destructive/20 rounded-md p-3">
              <p className="text-sm text-destructive">
                <strong>Ï£ºÏùò:</strong> ÏÇ≠Ï†úÎêú Ï†ïÎ≥¥Îäî Î≥µÍµ¨Ìï† Ïàò ÏóÜÏäµÎãàÎã§.
              </p>
            </div>
            <div className="flex justify-end space-x-2">
              <Button
                onClick={() => setShowDeleteConfirm(false)}
                variant="outline"
              >
                Ï∑®ÏÜå
              </Button>
              <Button
                onClick={handleDeleteMember}
                variant="destructive"
                className="flex items-center gap-2"
              >
                <Trash2 className="w-4 h-4" />
                ÏÇ≠Ï†ú
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Excel Import Modal */}
      <Dialog open={showExcelImportModal} onOpenChange={setShowExcelImportModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Upload className="w-5 h-5" />
              ÏóëÏÖÄ ÏùºÍ¥Ñ Îì±Î°ù
            </DialogTitle>
            <DialogDescription>
              ÏóëÏÖÄ ÌååÏùºÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ Ïó¨Îü¨ ÍµêÏù∏ÏùÑ ÌïúÎ≤àÏóê Îì±Î°ùÌï† Ïàò ÏûàÏäµÎãàÎã§.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div className="bg-blue-50 border border-blue-200 rounded-md p-3">
              <p className="text-sm text-blue-800">
                <strong>ÏïàÎÇ¥:</strong> ÏóëÏÖÄ ÌÖúÌîåÎ¶øÏùÑ Î®ºÏ†Ä Îã§Ïö¥Î°úÎìúÌïòÏó¨ ÏûëÏÑ±Ìïú ÌõÑ ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî.
              </p>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                ÏóëÏÖÄ ÌååÏùº ÏÑ†ÌÉù
              </label>
              <Input
                type="file"
                accept=".csv,.xlsx,.xls"
                onChange={(e) => {
                  const file = e.target.files?.[0];
                  if (file) setExcelFile(file);
                }}
              />
              <p className="text-xs text-muted-foreground mt-1">
                CSV, XLSX, XLS ÌååÏùºÎßå Í∞ÄÎä•
              </p>
            </div>
            
            {excelFile && (
              <div className="bg-green-50 border border-green-200 rounded-md p-3">
                <p className="text-sm text-green-800">
                  <strong>ÏÑ†ÌÉùÎêú ÌååÏùº:</strong> {excelFile.name}
                </p>
              </div>
            )}
            
            <div className="flex justify-end space-x-2">
              <Button
                onClick={() => {
                  setShowExcelImportModal(false);
                  setExcelFile(null);
                }}
                variant="outline"
                disabled={isImporting}
              >
                Ï∑®ÏÜå
              </Button>
              <Button
                onClick={handleExcelImport}
                disabled={!excelFile || isImporting}
                className="flex items-center gap-2"
              >
                {isImporting ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    Îì±Î°ù Ï§ë...
                  </>
                ) : (
                  <>
                    <Upload className="w-4 h-4" />
                    Îì±Î°ù ÏãúÏûë
                  </>
                )}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Advanced Search Modal */}
      <Dialog open={showAdvancedSearch} onOpenChange={setShowAdvancedSearch}>
        <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Settings className="w-5 h-5" />
              ÏÉÅÏÑ∏ Í≤ÄÏÉâ
            </DialogTitle>
            <DialogDescription>
              Ïó¨Îü¨ Ï°∞Í±¥ÏùÑ Ï°∞Ìï©ÌïòÏó¨ ÍµêÏù∏ÏùÑ Í≤ÄÏÉâÌï† Ïàò ÏûàÏäµÎãàÎã§.
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-6">
            {/* Í∏∞Î≥∏ Ï†ïÎ≥¥ */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">Í∏∞Î≥∏ Ï†ïÎ≥¥</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-foreground mb-1">Ïù¥Î¶Ñ</label>
                  <Input
                    value={advancedSearchData.name}
                    onChange={(e) => setAdvancedSearchData(prev => ({ ...prev, name: e.target.value }))}
                    placeholder="ÌôçÍ∏∏Îèô"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-foreground mb-1">Ïù¥Î©îÏùº</label>
                  <Input
                    value={advancedSearchData.email}
                    onChange={(e) => setAdvancedSearchData(prev => ({ ...prev, email: e.target.value }))}
                    placeholder="example@email.com"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-foreground mb-1">Ï†ÑÌôîÎ≤àÌò∏</label>
                  <Input
                    value={advancedSearchData.phone}
                    onChange={(e) => setAdvancedSearchData(prev => ({ ...prev, phone: e.target.value }))}
                    placeholder="010-1234-5678"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-foreground mb-1">ÏÑ±Î≥Ñ</label>
                  <Select value={advancedSearchData.gender} onValueChange={(value) => setAdvancedSearchData(prev => ({ ...prev, gender: value }))}>
                    <SelectTrigger>
                      <SelectValue placeholder="ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">Ï†ÑÏ≤¥</SelectItem>
                      <SelectItem value="ÎÇ®">ÎÇ®</SelectItem>
                      <SelectItem value="Ïó¨">Ïó¨</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>

            {/* ÍµêÌöå Ï†ïÎ≥¥ */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">ÍµêÌöå Ï†ïÎ≥¥</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-foreground mb-1">ÏßÅÎ∂Ñ</label>
                  <Input
                    value={advancedSearchData.position}
                    onChange={(e) => setAdvancedSearchData(prev => ({ ...prev, position: e.target.value }))}
                    placeholder="ÏßëÏÇ¨, Í∂åÏÇ¨, Ïû•Î°ú Îì±"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-foreground mb-1">Íµ¨Ïó≠</label>
                  <Input
                    value={advancedSearchData.district}
                    onChange={(e) => setAdvancedSearchData(prev => ({ ...prev, district: e.target.value }))}
                    placeholder="1Íµ¨Ïó≠, 2Íµ¨Ïó≠ Îì±"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-foreground mb-1">ÍµêÏù∏Íµ¨Î∂Ñ</label>
                  <Select value={advancedSearchData.member_type} onValueChange={(value) => setAdvancedSearchData(prev => ({ ...prev, member_type: value }))}>
                    <SelectTrigger>
                      <SelectValue placeholder="ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">Ï†ÑÏ≤¥</SelectItem>
                      <SelectItem value="Ï†ïÍµêÏù∏">Ï†ïÍµêÏù∏</SelectItem>
                      <SelectItem value="ÌïôÏäµÍµêÏù∏">ÌïôÏäµÍµêÏù∏</SelectItem>
                      <SelectItem value="ÏÑ∏Î°ÄÍµêÏù∏">ÏÑ∏Î°ÄÍµêÏù∏</SelectItem>
                      <SelectItem value="Î∞©Î¨∏Ïûê">Î∞©Î¨∏Ïûê</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-foreground mb-1">Ïã†Í∏â</label>
                  <Select value={advancedSearchData.spiritual_grade} onValueChange={(value) => setAdvancedSearchData(prev => ({ ...prev, spiritual_grade: value }))}>
                    <SelectTrigger>
                      <SelectValue placeholder="ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">Ï†ÑÏ≤¥</SelectItem>
                      <SelectItem value="Ï¥àÏã†Ïûê">Ï¥àÏã†Ïûê</SelectItem>
                      <SelectItem value="BÍ∏â">BÍ∏â</SelectItem>
                      <SelectItem value="AÍ∏â">AÍ∏â</SelectItem>
                      <SelectItem value="Î¶¨Îçî">Î¶¨Îçî</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>

            {/* ÎÇòÏù¥ Î≤îÏúÑ */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">ÎÇòÏù¥ Î≤îÏúÑ</h3>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-foreground mb-1">ÏµúÏÜå ÎÇòÏù¥</label>
                  <Input
                    type="number"
                    value={advancedSearchData.ageFrom}
                    onChange={(e) => setAdvancedSearchData(prev => ({ ...prev, ageFrom: e.target.value }))}
                    placeholder="0"
                    min="0"
                    max="120"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-foreground mb-1">ÏµúÎåÄ ÎÇòÏù¥</label>
                  <Input
                    type="number"
                    value={advancedSearchData.ageTo}
                    onChange={(e) => setAdvancedSearchData(prev => ({ ...prev, ageTo: e.target.value }))}
                    placeholder="120"
                    min="0"
                    max="120"
                  />
                </div>
              </div>
            </div>
          </div>

          <div className="flex justify-end gap-2 pt-4">
            <Button
              onClick={() => {
                setAdvancedSearchData({
                  name: '',
                  email: '',
                  phone: '',
                  gender: 'all',
                  position: '',
                  district: '',
                  ageFrom: '',
                  ageTo: '',
                  member_type: 'all',
                  spiritual_grade: 'all'
                });
              }}
              variant="outline"
            >
              Ï¥àÍ∏∞Ìôî
            </Button>
            <Button
              onClick={() => {
                setShowAdvancedSearch(false);
                // TODO: Ïã§Ï†ú ÏÉÅÏÑ∏ Í≤ÄÏÉâ Ïã§Ìñâ Î°úÏßÅ Íµ¨ÌòÑ
                console.log('Advanced search with:', advancedSearchData);
              }}
              className="flex items-center gap-2"
            >
              <Search className="w-4 h-4" />
              Í≤ÄÏÉâ Ïã§Ìñâ
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* Add Member Modal */}
      <AddMemberModal 
        open={showAddMemberModal} 
        onOpenChange={setShowAddMemberModal}
        onMemberAdded={fetchMembers}
      />
    </div>
  );
};

export default MemberManagement;