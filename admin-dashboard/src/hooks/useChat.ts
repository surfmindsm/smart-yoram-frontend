import { useState, useRef, useEffect } from 'react';
import { ChatMessage, ChatHistory, Agent, DeleteConfirmModal } from '../types/chat';
import { chatService, agentService } from '../services/api';
import { saveMessageViaMCP, loadMessagesViaMCP } from '../utils/mcpUtils';

// üöÄ localStorage Ï∫êÏãú ÌÇ§
const CACHE_KEYS = {
  CHAT_HISTORY: 'chat_history_cache',
  AGENTS: 'agents_cache',
  CACHE_TIMESTAMP: 'cache_timestamp'
};

// üöÄ Ï∫êÏãú Ïú†Ìö® ÏãúÍ∞Ñ (5Î∂Ñ)
const CACHE_DURATION = 5 * 60 * 1000;

export const useChat = () => {
  // üöÄ localStorageÏóêÏÑú Ï¶âÏãú Ï∫êÏãúÎêú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  const getInitialChatHistory = (): ChatHistory[] => {
    try {
      const cached = localStorage.getItem(CACHE_KEYS.CHAT_HISTORY);
      const timestamp = localStorage.getItem(CACHE_KEYS.CACHE_TIMESTAMP);
      
      if (cached && timestamp) {
        const age = Date.now() - parseInt(timestamp);
        if (age < CACHE_DURATION) {
          const parsedHistory = JSON.parse(cached).map((history: any) => ({
            ...history,
            timestamp: new Date(history.timestamp)
          }));
          console.log('üöÄ Ï∫êÏãúÎêú Ï±ÑÌåÖ ÌûàÏä§ÌÜ†Î¶¨ Ï¶âÏãú Î°úÎìú:', parsedHistory.length, 'Í∞ú');
          return parsedHistory;
        }
      }
    } catch (error) {
      console.error('Ï∫êÏãú Î°úÎìú Ïã§Ìå®:', error);
    }
    return [];
  };
  
  const getInitialAgents = (): Agent[] => {
    try {
      const cached = localStorage.getItem(CACHE_KEYS.AGENTS);
      const timestamp = localStorage.getItem(CACHE_KEYS.CACHE_TIMESTAMP);
      
      if (cached && timestamp) {
        const age = Date.now() - parseInt(timestamp);
        if (age < CACHE_DURATION) {
          console.log('üöÄ Ï∫êÏãúÎêú ÏóêÏù¥Ï†ÑÌä∏ Ï¶âÏãú Î°úÎìú:', JSON.parse(cached).length, 'Í∞ú');
          return JSON.parse(cached);
        }
      }
    } catch (error) {
      console.error('Ï∫êÏãú Î°úÎìú Ïã§Ìå®:', error);
    }
    return [];
  };
  
  // üöÄ Ï¥àÍ∏∞ Ï∫êÏãú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  const initialHistory = getInitialChatHistory();
  const initialAgents = getInitialAgents();

  // ÏÉÅÌÉú Ï†ïÏùò
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [chatHistory, setChatHistory] = useState<ChatHistory[]>(initialHistory);
  const [currentChatId, setCurrentChatId] = useState<string | null>(
    initialHistory.length > 0 ? initialHistory[0].id : null
  );
  const [agents, setAgents] = useState<Agent[]>(initialAgents);
  const [selectedAgent, setSelectedAgent] = useState<Agent | null>(null);
  const [selectedAgentForChat, setSelectedAgentForChat] = useState<Agent | null>(null);
  const [showHistory, setShowHistory] = useState(true);
  const [activeTab, setActiveTab] = useState<'history' | 'agents'>('history');
  const [loadingChats, setLoadingChats] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [openMenuId, setOpenMenuId] = useState<string | null>(null);
  const [editingChatId, setEditingChatId] = useState<string | null>(null);
  const [editingTitle, setEditingTitle] = useState('');
  const [deleteConfirmModal, setDeleteConfirmModal] = useState<DeleteConfirmModal>({
    isOpen: false,
    chatId: null,
    chatTitle: ''
  });
  const [messageCache, setMessageCache] = useState<{[key: string]: ChatMessage[]}>({});
  
  // üöÄ Ï§ëÎ≥µ Î°úÎî© Î∞©ÏßÄÎ•º ÏúÑÌïú ÏÉÅÌÉú
  const [isDataLoaded, setIsDataLoaded] = useState(initialHistory.length > 0 && initialAgents.length > 0);
  const [isLoadingData, setIsLoadingData] = useState(false);
  
  // üöÄ Ï∫êÏãú Ï†ÄÏû• Ìï®Ïàò
  const saveChatHistoryToCache = (histories: ChatHistory[]) => {
    try {
      localStorage.setItem(CACHE_KEYS.CHAT_HISTORY, JSON.stringify(histories));
      localStorage.setItem(CACHE_KEYS.CACHE_TIMESTAMP, Date.now().toString());
      console.log('üíæ Ï±ÑÌåÖ ÌûàÏä§ÌÜ†Î¶¨ Ï∫êÏãú Ï†ÄÏû•:', histories.length, 'Í∞ú');
    } catch (error) {
      console.error('Ï∫êÏãú Ï†ÄÏû• Ïã§Ìå®:', error);
    }
  };
  
  const saveAgentsToCache = (agentList: Agent[]) => {
    try {
      localStorage.setItem(CACHE_KEYS.AGENTS, JSON.stringify(agentList));
      localStorage.setItem(CACHE_KEYS.CACHE_TIMESTAMP, Date.now().toString());
      console.log('üíæ ÏóêÏù¥Ï†ÑÌä∏ Ï∫êÏãú Ï†ÄÏû•:', agentList.length, 'Í∞ú');
    } catch (error) {
      console.error('Ï∫êÏãú Ï†ÄÏû• Ïã§Ìå®:', error);
    }
  };
  
  // Refs
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const dropdownRef = useRef<HTMLDivElement>(null);

  // Ïä§ÌÅ¨Î°§ Ïú†Ìã∏Î¶¨Ìã∞
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  // Mock AI ÏùëÎãµ ÏÉùÏÑ± (Í∏∞Ï°¥ Ïª§Î∞ãÍ≥º ÎèôÏùº)
  const getMockAIResponse = (userInput: string): ChatMessage => {
    const responses: {[key: string]: string} = {
      'Í≤∞ÏÑùÏûê': 'Ïù¥Î≤à Ï£º Í≤∞ÏÑùÏûê Î™ÖÎã®ÏùÑ ÌôïÏù∏Ìï¥ÎìúÎ¶¨Í≤†ÏäµÎãàÎã§.\n\n**Ï£ºÏùºÏòàÎ∞∞ Í≤∞ÏÑùÏûê (11Ïõî 12Ïùº)**\n‚Ä¢ ÍπÄÏ≤†Ïàò (Ïó∞ÎùΩÏ≤ò: 010-1234-5678)\n‚Ä¢ Î∞ïÏòÅÌù¨ (Ïó∞ÎùΩÏ≤ò: 010-9876-5432)\n‚Ä¢ Ïù¥ÎØºÏàò (Ïó∞ÎùΩÏ≤ò: 010-5555-7777)\n\n**ÏÉàÍ∞ÄÏ°±Î∂Ä**\n‚Ä¢ Ï†ïÏàòÏßÑ (ÏÉàÍ∞ÄÏ°±, Î∞©Î¨∏ ÌïÑÏöî)\n\nÎã¥Îãπ Íµ¨Ïó≠Ïû•ÎãòÎì§Íªò Ïó∞ÎùΩ Î∂ÄÌÉÅÎìúÎ¶ΩÎãàÎã§.',
      
      'ÏÉàÍ∞ÄÏ°±': 'ÏÉàÍ∞ÄÏ°± ÌòÑÌô©ÏùÑ ÏïåÎ†§ÎìúÎ¶¨Í≤†ÏäµÎãàÎã§.\n\n**Ïù¥Î≤à Îã¨ ÏÉàÍ∞ÄÏ°±**\n‚Ä¢ Ï†ïÏàòÏßÑ (30ÎåÄ Ïó¨ÏÑ±, ÏßÅÏû•Ïù∏)\n‚Ä¢ ÍπÄÏòÅÌò∏ (40ÎåÄ ÎÇ®ÏÑ±, ÏûêÏòÅÏóÖ)\n‚Ä¢ ÏµúÎØ∏Îûò (20ÎåÄ Ïó¨ÏÑ±, ÎåÄÌïôÏÉù)\n\n**ÌïÑÏöîÌïú Ï°∞Ïπò**\n1. ÌôòÏòÅ Ï†ÑÌôî (Îã¥Îãπ: Ï†ÑÎèÑÎ∂Ä)\n2. ÏÉàÍ∞ÄÏ°± ÏòàÎ∞∞ ÏïàÎÇ¥\n3. Ï†ïÏ∞©Î∞ò Îì±Î°ù Ï∂îÏ≤ú\n\nÏÉàÍ∞ÄÏ°±Îì§Ïùò Ï†ïÏ∞©ÏùÑ ÏúÑÌï¥ ÎßéÏùÄ Í¥ÄÏã¨ Î∂ÄÌÉÅÎìúÎ¶ΩÎãàÎã§.',
      
      'default': 'ÏïàÎÖïÌïòÏÑ∏Ïöî! AI ÍµêÏó≠ÏûêÏûÖÎãàÎã§. ÍµêÌöå ÏÇ¨Ïó≠Í≥º Í¥ÄÎ†®Îêú Îã§ÏñëÌïú ÏßàÎ¨∏Ïóê ÎèÑÏõÄÏùÑ ÎìúÎ¶¥ Ïàò ÏûàÏäµÎãàÎã§.\n\nÍµ¨Ï≤¥Ï†ÅÏù∏ ÏßàÎ¨∏ÏùÑ Ìï¥Ï£ºÏãúÎ©¥ Îçî Ï†ïÌôïÌïú Ï†ïÎ≥¥Î•º Ï†úÍ≥µÌï¥ÎìúÎ¶¨Í≤†ÏäµÎãàÎã§.'
    };

    let content = responses['default'];
    if (userInput.includes('Í≤∞ÏÑù') || userInput.includes('Ï∂úÏÑù')) {
      content = responses['Í≤∞ÏÑùÏûê'];
    } else if (userInput.includes('ÏÉàÍ∞ÄÏ°±')) {
      content = responses['ÏÉàÍ∞ÄÏ°±'];
    }

    return {
      id: `msg-${Date.now()}`,
      content,
      role: 'assistant',
      timestamp: new Date(),
      tokensUsed: Math.floor(Math.random() * 200) + 50,
      cost: Math.random() * 0.1 + 0.02
    };
  };

  // üöÄ Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏµúÏ†ÅÌôî - Ï§ëÎ≥µ Ìò∏Ï∂ú Î∞©ÏßÄ + Ï∫êÏãú ÌôúÏö©
  const loadData = async () => {
    // Ïù¥ÎØ∏ Î°úÎî© Ï§ëÏù¥Í±∞ÎÇò Î°úÎìú ÏôÑÎ£åÎêú Í≤ΩÏö∞ Ï§ëÎ≥µ Ìò∏Ï∂ú Î∞©ÏßÄ
    if (isLoadingData || isDataLoaded) {
      console.log('‚ö° Ï§ëÎ≥µ Î°úÎî© Î∞©ÏßÄ:', { isLoadingData, isDataLoaded });
      return;
    }
    
    // üöÄ Ï∫êÏãúÍ∞Ä ÏûàÏúºÎ©¥ API Ìò∏Ï∂ú ÏÉùÎûµ
    const hasCachedHistory = chatHistory.length > 0;
    const hasCachedAgents = agents.length > 0;
    
    if (hasCachedHistory && hasCachedAgents) {
      console.log('üöÄ Ï∫êÏãúÎêú Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö© - API Ìò∏Ï∂ú ÏÉùÎûµ');
      setIsDataLoaded(true);
      setLoadingChats(false);
      
      // currentChatIdÍ∞Ä ÏóÜÏúºÎ©¥ Ï≤´ Î≤àÏß∏ Ï±ÑÌåÖÏúºÎ°ú ÏÑ§Ï†ï
      if (!currentChatId && chatHistory.length > 0) {
        setCurrentChatId(chatHistory[0].id);
      }
      return;
    }
    
    try {
      setIsLoadingData(true);
      setLoadingChats(true);
      
      // Î≥ëÎ†¨ API Ìò∏Ï∂ú (ÏóêÏù¥Ï†ÑÌä∏, Ï±ÑÌåÖ ÌûàÏä§ÌÜ†Î¶¨)
      const [agentsResult, chatsResult] = await Promise.allSettled([
        agentService.getAgents(),
        chatService.getChatHistories({ limit: 50 })
      ]);

      // Ï±ÑÌåÖ ÌûàÏä§ÌÜ†Î¶¨ Ï≤òÎ¶¨
      if (chatsResult.status === 'fulfilled') {
        const response = chatsResult.value;
        const histories = response.data || response;
        if (Array.isArray(histories)) {
          const formattedHistories = histories.map((history: any) => ({
            ...history,
            timestamp: new Date(history.timestamp || history.created_at),
            isBookmarked: history.is_bookmarked || false
          }));
          setChatHistory(formattedHistories);
          saveChatHistoryToCache(formattedHistories); // üöÄ Ï∫êÏãú Ï†ÄÏû•
          if (formattedHistories.length > 0 && !currentChatId) {
            setCurrentChatId(formattedHistories[0].id);
          }
        } else {
          setChatHistory([]);
        }
      } else {
        // Mock Îç∞Ïù¥ÌÑ∞ Ìè¥Î∞±
        const mockHistory: ChatHistory[] = [
          {
            id: '1',
            title: 'ÏÉà ÎåÄÌôî',
            timestamp: new Date(),
            messageCount: 0,
            isBookmarked: false
          }
        ];
        setChatHistory(mockHistory);
        saveChatHistoryToCache(mockHistory); // üöÄ Ï∫êÏãú Ï†ÄÏû•
        if (!currentChatId) {
          setCurrentChatId(mockHistory[0].id);
        }
      }

      // ÏóêÏù¥Ï†ÑÌä∏ Ï≤òÎ¶¨ (Í∏∞Ï°¥ Ïª§Î∞ãÍ≥º ÎèôÏùºÌïú Î°úÏßÅ)
      if (agentsResult.status === 'fulfilled') {
        const response = agentsResult.value;
        console.log('üîç AIChat - ÏóêÏù¥Ï†ÑÌä∏ API ÏùëÎãµ:', response);
        
        let agentList = [];
        
        // ÏÉàÎ°úÏö¥ API ÌòïÏãù Ï≤òÎ¶¨ (Í∏∞Ï°¥ Ïª§Î∞ãÍ≥º ÎèôÏùº)
        if (response.success && response.data && Array.isArray(response.data.agents)) {
          agentList = response.data.agents;
        } else if (Array.isArray(response.data)) {
          agentList = response.data;
        } else if (Array.isArray(response)) {
          agentList = response;
        }
        
        if (agentList.length > 0) {
          // Î∞±ÏóîÎìú snake_caseÎ•º ÌîÑÎ°†Ìä∏ÏóîÎìú camelCaseÎ°ú Î≥ÄÌôò
          const transformedAgents = agentList.map((agent: any) => ({
            id: agent.id,
            name: agent.name,
            category: agent.category,
            description: agent.description,
            isActive: agent.is_active || agent.isActive,
            icon: agent.icon,
            systemPrompt: agent.system_prompt,
            detailedDescription: agent.detailed_description
          }));
          
          setAgents(transformedAgents);
          saveAgentsToCache(transformedAgents); // üöÄ Ï∫êÏãú Ï†ÄÏû•
          console.log('‚úÖ AIChat - ÏóêÏù¥Ï†ÑÌä∏ Î°úÎìú ÏÑ±Í≥µ:', transformedAgents.length, 'Í∞ú');
        } else {
          console.log('‚ö†Ô∏è AIChat - ÏóêÏù¥Ï†ÑÌä∏ Î™©Î°ùÏù¥ ÎπÑÏñ¥ÏûàÏùå');
          setAgents([]);
        }
      } else {
        console.log('‚ùå AIChat - ÏóêÏù¥Ï†ÑÌä∏ Î°úÎî© Ïã§Ìå®, Mock Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©');
        const mockAgents: Agent[] = [
          { id: '1', name: 'ÍµêÏù∏Ï†ïÎ≥¥ ÏóêÏù¥Ï†ÑÌä∏', category: 'ÍµêÏù∏ Í¥ÄÎ¶¨', description: 'ÍµêÏù∏ Îì±Î°ù, Ï∂úÏÑù Í¥ÄÎ¶¨, Ïó∞ÎùΩÏ≤ò Í¥ÄÎ¶¨ Îì±ÏùÑ ÎèÑÏôÄÎìúÎ¶ΩÎãàÎã§.', isActive: true },
          { id: '2', name: 'ÏòàÎ∞∞ ÏïàÎÇ¥ ÏóêÏù¥Ï†ÑÌä∏', category: 'ÏòàÎ∞∞ Ï†ïÎ≥¥', description: 'Ï£ºÏùºÏòàÎ∞∞, ÌäπÎ≥ÑÏòàÎ∞∞ ÏãúÍ∞ÑÍ≥º Ïû•ÏÜåÎ•º ÏïàÎÇ¥Ìï¥ÎìúÎ¶ΩÎãàÎã§.', isActive: true },
          { id: '3', name: 'Í≥µÏßÄÏÇ¨Ìï≠ ÏóêÏù¥Ï†ÑÌä∏', category: 'Ï†ïÎ≥¥ Ï†ÑÎã¨', description: 'ÍµêÌöå ÏÜåÏãùÍ≥º Ï§ëÏöîÌïú Í≥µÏßÄÏÇ¨Ìï≠ÏùÑ Ï†ÑÎã¨Ìï¥ÎìúÎ¶ΩÎãàÎã§.', isActive: true },
          { id: '4', name: 'ÏÉÅÎã¥ ÏóêÏù¥Ï†ÑÌä∏', category: 'Î™©Ìöå ÏÉÅÎã¥', description: 'Ïã†Ïïô ÏÉÅÎã¥Í≥º Í∞úÏù∏Ï†ÅÏù∏ Í≥†ÎØºÏùÑ Ìï®Íªò ÎÇòÎàå Ïàò ÏûàÏäµÎãàÎã§.', isActive: true }
        ];
        setAgents(mockAgents);
        console.log('üîÑ AIChat - Mock ÏóêÏù¥Ï†ÑÌä∏ ÏÇ¨Ïö©:', mockAgents.length, 'Í∞ú');
      }
      
      // ‚úÖ Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏôÑÎ£å ÌëúÏãú
      setIsDataLoaded(true);
      console.log('‚úÖ Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏôÑÎ£å!');
      
    } catch (error) {
      console.error('‚ùå AIChat - Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïã§Ìå®:', error);
      
      // ÏôÑÏ†Ñ Ïã§Ìå® Ïãú Mock Îç∞Ïù¥ÌÑ∞
      const mockHistory: ChatHistory[] = [
        {
          id: '1',
          title: 'ÏÉà ÎåÄÌôî',
          timestamp: new Date(),
          messageCount: 0,
          isBookmarked: false
        }
      ];
      setChatHistory(mockHistory);
      setCurrentChatId(mockHistory[0].id);
      
      const mockAgents: Agent[] = [
        { id: '1', name: 'ÍµêÏù∏Ï†ïÎ≥¥ ÏóêÏù¥Ï†ÑÌä∏', category: 'ÍµêÏù∏ Í¥ÄÎ¶¨', description: 'ÍµêÏù∏ Îì±Î°ù, Ï∂úÏÑù Í¥ÄÎ¶¨, Ïó∞ÎùΩÏ≤ò Í¥ÄÎ¶¨ Îì±ÏùÑ ÎèÑÏôÄÎìúÎ¶ΩÎãàÎã§.', isActive: true },
        { id: '2', name: 'ÏòàÎ∞∞ ÏïàÎÇ¥ ÏóêÏù¥Ï†ÑÌä∏', category: 'ÏòàÎ∞∞ Ï†ïÎ≥¥', description: 'Ï£ºÏùºÏòàÎ∞∞, ÌäπÎ≥ÑÏòàÎ∞∞ ÏãúÍ∞ÑÍ≥º Ïû•ÏÜåÎ•º ÏïàÎÇ¥Ìï¥ÎìúÎ¶ΩÎãàÎã§.', isActive: true }
      ];
      setAgents(mockAgents);
      
      // ‚ö†Ô∏è Ïò§Î•ò ÏãúÏóêÎèÑ Î°úÎî© ÏôÑÎ£åÎ°ú ÌëúÏãú (Ïû¨ÏãúÎèÑ Î∞©ÏßÄ)
      setIsDataLoaded(true);
    } finally {
      setLoadingChats(false);
      setIsLoadingData(false);
    }
  };

  // Î©îÏãúÏßÄ Î°úÎìú (Í∏∞Ï°¥ Ïª§Î∞ãÍ≥º ÎèôÏùº)
  const loadMessages = async () => {
    if (!currentChatId) return;

    // üöÄ Ï∫êÏãúÏóêÏÑú Î®ºÏ†Ä ÌôïÏù∏ (Ï¶âÏãú ÌëúÏãú)
    if (messageCache[currentChatId]) {
      setMessages(messageCache[currentChatId]);
      return;
    }

    try {
      const response = await chatService.getChatMessages(currentChatId);
      const messageList = response.data || response;
      const formattedMessages = Array.isArray(messageList) ? messageList.map((message: any) => ({
        ...message,
        timestamp: new Date(message.timestamp || message.created_at)
      })) : [];
      
      // üõ°Ô∏è ÏÑúÎ≤Ñ ÏùëÎãµÏù¥ ÎπÑÏñ¥ÏûàÍ≥† Ïù¥ÎØ∏ Î°úÏª¨ Î©îÏãúÏßÄÍ∞Ä ÏûàÎã§Î©¥ Í∏∞Ï°¥ Î©îÏãúÏßÄ Ïú†ÏßÄ
      if (formattedMessages.length === 0 && messages.length > 0) {
        console.log('üîÑ ÏÑúÎ≤Ñ ÏùëÎãµÏù¥ ÎπÑÏñ¥ÏûàÏßÄÎßå Î°úÏª¨ Î©îÏãúÏßÄ Ïú†ÏßÄ:', messages.length, 'Í∞ú');
        // ÌòÑÏû¨ Î©îÏãúÏßÄÎ•º Ï∫êÏãúÏóê Ï†ÄÏû•
        setMessageCache(prev => ({
          ...prev,
          [currentChatId]: messages
        }));
        return;
      }
      
      setMessages(formattedMessages);
      
      // üíæ Ï∫êÏãúÏóê Ï†ÄÏû• (Îã§ÏùåÏóê Ï¶âÏãú Î°úÎî©)
      setMessageCache(prev => ({
        ...prev,
        [currentChatId]: formattedMessages
      }));
    } catch (error) {
      console.error('Î©îÏãúÏßÄ Î°úÎî© Ïã§Ìå®:', error);
      // üõ°Ô∏è ÏóêÎü¨ Î∞úÏÉù ÏãúÏóêÎèÑ Í∏∞Ï°¥ Î©îÏãúÏßÄÍ∞Ä ÏûàÎã§Î©¥ Ïú†ÏßÄ
      if (messages.length === 0) {
        setMessages([]);
      }
    }
  };

  // useEffect: currentChatId Î≥ÄÍ≤Ω Ïãú Î©îÏãúÏßÄ Î°úÎìú
  useEffect(() => {
    if (currentChatId) {
      loadMessages();
    }
  }, [currentChatId]);

  // useEffect: Ïô∏Î∂Ä ÌÅ¥Î¶≠ÏúºÎ°ú Î©îÎâ¥ Îã´Í∏∞
  useEffect(() => {
    const handleClickOutside = () => {
      if (openMenuId) {
        setOpenMenuId(null);
      }
    };

    document.addEventListener('click', handleClickOutside);
    return () => document.removeEventListener('click', handleClickOutside);
  }, [openMenuId]);

  return {
    // ÏÉÅÌÉú
    messages,
    setMessages,
    inputValue,
    setInputValue,
    isLoading,
    setIsLoading,
    chatHistory,
    setChatHistory,
    currentChatId,
    setCurrentChatId,
    agents,
    setAgents,
    selectedAgent,
    setSelectedAgent,
    selectedAgentForChat,
    setSelectedAgentForChat,
    showHistory,
    setShowHistory,
    activeTab,
    setActiveTab,
    loadingChats,
    setLoadingChats,
    error,
    setError,
    openMenuId,
    setOpenMenuId,
    editingChatId,
    setEditingChatId,
    editingTitle,
    setEditingTitle,
    deleteConfirmModal,
    setDeleteConfirmModal,
    messageCache,
    setMessageCache,
    isDataLoaded,
    isLoadingData,
    
    // Refs
    messagesEndRef,
    dropdownRef,
    
    // Ìï®ÏàòÎì§
    scrollToBottom,
    getMockAIResponse,
    loadData,
    loadMessages
  };
};
